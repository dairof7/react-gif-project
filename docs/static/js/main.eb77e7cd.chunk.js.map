{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","categ","type","value","onChange","target","handleInputChange","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","console","log","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAe9C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEFN,GAAc,SAAAO,GAAK,OAAML,GAAN,mBAAoBK,OACvCJ,EAAc,MAMV,2BACIK,KAAK,OACLC,MAAQP,EACRQ,SAAW,SAAEL,GAAF,OAlBG,SAACA,GACvBF,EAAcE,EAAEM,OAAOF,OAiBKG,CAAkBP,Q,uBCvBrCQ,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEKI,MAAOF,GAFZ,cAEbG,EAFa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeXM,GAfW,4CAAH,sDCCXO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,yBAAKc,UAAU,8CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCDJO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SACvBoB,QAAQC,IAAI,WAD2B,MCDf,SAAErB,GAAe,IAAD,EAEdb,mBAAS,CAC3BoB,KAAM,GACNe,SAAS,IAJuB,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAZIC,qBAAU,WAEN1B,EAASC,GACJ0B,MAAM,SAAAC,GACCH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAG1B,CAAEtB,IAGFuB,EDf0BK,CAAc5B,GAAlCa,EAJ0B,EAI/BN,KAAae,EAJkB,EAIlBA,QAErB,OACI,oCACA,wBAAIN,UAAU,yCAAd,IAAyDhB,EAAzD,KAECsB,GAAW,yCACZ,yBAAKN,UAAU,aAEHH,EAAOJ,KAAK,SAACC,GAAD,OACZ,kBAAC,EAAD,eACImB,IAAKnB,EAAIC,IAILD,UEpBfoB,EAAe,WAAM,MAKM3C,mBAAS,CAAC,KALhB,mBAKvB4C,EALuB,KAKX7C,EALW,KAO9B,OADAkC,QAAQC,IAAI,UAER,oCACI,0CAEA,kBAAC,EAAD,CAAanC,cAAgBA,IAC7B,6BACA,4BAEQ6C,EAAWtB,KAAK,SAAAT,GAAQ,OAMxB,kBAAC,EAAD,CACI6B,IAAK7B,EACLA,SAAWA,U,MCrBnCgC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.eb77e7cd.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setinputValue] = useState('')\n    const handleInputChange = (e) => {\n        setinputValue(e.target.value)        \n        //console.log(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //cuando uso una funcion useState puedo usar el valor del estado anterior categ en este caso\n        setCategories(categ => [ inputValue,...categ ] )\n        setinputValue('')\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type='text'\n                value={ inputValue }\n                onChange={ ( e ) => handleInputChange(e) }\n            />\n        </form>\n        \n\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n    export const getGifs = async( category ) => {\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=Tx8dUbO49O3dDMbWR3RwxslRcD87h7tN`\n        const respuesta = await fetch( url )\n        //extraemos solo la data\n        const { data } = await respuesta.json()\n\n        const gifs = data.map( img => {\n            return{\n                id: img.id,\n                title: img.title,\n                //preguntamos si existe la img.images\n                url: img.images?.downsized_medium.url\n            }\n\n        })\n        return( gifs );\n    }","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n    return (\n        <div className='card animate__animated animate__backInDown'>\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ( { category } ) => {\n    console.log('gifgrid')\n    \n    //en la desestructuracion puedo renombrar data si quiero, en este caso images\n    const { data:images, loading } = useFetchGifs( category );\n    //recibe una funcion y un arreglo de dependencias\n    return (\n        <>\n        <h3 className='animate__animated animate__fadeInLeft'> { category } </h3>\n        {/* si esta cargando aparece, condicional corto con && */}\n        {loading && <p>Loading...</p>}\n        <div className='card-grid'>\n                {\n                    images.map( (img) => \n                    <GifGridItem \n                        key={img.id}\n                        //de esta forma se envia el paquete completo, es decir el array de objetos\n                        //img={img}\n                        //de esta otra forma estamos enviando ya cada uno de los objetos fuera del array\n                        {...img}\n                    />\n                    )\n                }\n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n            data: [],\n            loading: true\n    }) \n\n     //los efectos no pueden ser asyncs\n        useEffect(() => {\n            //como getGifts es una promesa entonces ....            \n            getGifs( category )\n                .then( imgs => {\n                        setState({\n                            data: imgs,\n                            loading: false\n                        })\n            } )\n        }, [ category ])\n\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    //puedo usar las categorias de esta forma si nunca se van a modificar\n    //de lo contraria es mejor usar hooks\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState([''])\n    console.log('la app')\n    return (\n        <>\n            <h2>Gif Search</h2>\n            {/* enviamos la funcion setcategories al argumento con el mismo nombre */}\n            <AddCategory setCategories={ setCategories } />\n            <hr/>\n            <ol>\n                {\n                    categories.map( category => (\n                    //react necesita que cada lista se asocie a un key\n                    //en este caso la key va a ser cada uno de los elementos\n                    //el key normalmente es el id proveniente de una base de datos\n                    //return <li key= { category }> { category }</li> \n                    //ahora reemplazamos por otro componente\n                    <GifGrid \n                        key={category}\n                        category= {category} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}